// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v3.21.12
// source: language.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // Error message.
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`      // Error code.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_language_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type Language struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid          string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Language) Reset() {
	*x = Language{}
	mi := &file_language_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Language) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Language) ProtoMessage() {}

func (x *Language) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Language.ProtoReflect.Descriptor instead.
func (*Language) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{1}
}

func (x *Language) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Language) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Language) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LanguageFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // Filter by ID (optional).
	Uuid          string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"` // Filter by UUID (optional).
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"` // Filter by name (optional).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LanguageFilter) Reset() {
	*x = LanguageFilter{}
	mi := &file_language_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LanguageFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageFilter) ProtoMessage() {}

func (x *LanguageFilter) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageFilter.ProtoReflect.Descriptor instead.
func (*LanguageFilter) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{2}
}

func (x *LanguageFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LanguageFilter) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *LanguageFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetLanguageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *LanguageFilter        `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"` // Filter criteria for the query.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLanguageRequest) Reset() {
	*x = GetLanguageRequest{}
	mi := &file_language_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLanguageRequest) ProtoMessage() {}

func (x *GetLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLanguageRequest.ProtoReflect.Descriptor instead.
func (*GetLanguageRequest) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{3}
}

func (x *GetLanguageRequest) GetFilter() *LanguageFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetLanguageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Language      *Language              `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"` // The language that matches the filter.
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLanguageResponse) Reset() {
	*x = GetLanguageResponse{}
	mi := &file_language_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLanguageResponse) ProtoMessage() {}

func (x *GetLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLanguageResponse.ProtoReflect.Descriptor instead.
func (*GetLanguageResponse) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{4}
}

func (x *GetLanguageResponse) GetLanguage() *Language {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *GetLanguageResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type ListLanguagesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// LanguageFilter filter = 1;
	Page          int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`         // Pagination: page number.
	PageSize      int32 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"` // Pagination: number of items per page.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListLanguagesRequest) Reset() {
	*x = ListLanguagesRequest{}
	mi := &file_language_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLanguagesRequest) ProtoMessage() {}

func (x *ListLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLanguagesRequest.ProtoReflect.Descriptor instead.
func (*ListLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{5}
}

func (x *ListLanguagesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListLanguagesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListLanguagesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Languages     []*Language            `protobuf:"bytes,1,rep,name=languages,proto3" json:"languages,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	Error         *Error                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListLanguagesResponse) Reset() {
	*x = ListLanguagesResponse{}
	mi := &file_language_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLanguagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLanguagesResponse) ProtoMessage() {}

func (x *ListLanguagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLanguagesResponse.ProtoReflect.Descriptor instead.
func (*ListLanguagesResponse) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{6}
}

func (x *ListLanguagesResponse) GetLanguages() []*Language {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *ListLanguagesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListLanguagesResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type CreateLanguageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Name of the language to create.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateLanguageRequest) Reset() {
	*x = CreateLanguageRequest{}
	mi := &file_language_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLanguageRequest) ProtoMessage() {}

func (x *CreateLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLanguageRequest.ProtoReflect.Descriptor instead.
func (*CreateLanguageRequest) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{7}
}

func (x *CreateLanguageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateLanguageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Language      *Language              `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"` // The created language.
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateLanguageResponse) Reset() {
	*x = CreateLanguageResponse{}
	mi := &file_language_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLanguageResponse) ProtoMessage() {}

func (x *CreateLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLanguageResponse.ProtoReflect.Descriptor instead.
func (*CreateLanguageResponse) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{8}
}

func (x *CreateLanguageResponse) GetLanguage() *Language {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *CreateLanguageResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type UpdateLanguageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // ID of the language to update.
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // New name for the language.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLanguageRequest) Reset() {
	*x = UpdateLanguageRequest{}
	mi := &file_language_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLanguageRequest) ProtoMessage() {}

func (x *UpdateLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLanguageRequest.ProtoReflect.Descriptor instead.
func (*UpdateLanguageRequest) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateLanguageRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateLanguageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateLanguageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Language      *Language              `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"` // The updated language.
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLanguageResponse) Reset() {
	*x = UpdateLanguageResponse{}
	mi := &file_language_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLanguageResponse) ProtoMessage() {}

func (x *UpdateLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLanguageResponse.ProtoReflect.Descriptor instead.
func (*UpdateLanguageResponse) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateLanguageResponse) GetLanguage() *Language {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UpdateLanguageResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type DeleteLanguageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *LanguageFilter        `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"` // Filter criteria for deletion.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteLanguageRequest) Reset() {
	*x = DeleteLanguageRequest{}
	mi := &file_language_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLanguageRequest) ProtoMessage() {}

func (x *DeleteLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLanguageRequest.ProtoReflect.Descriptor instead.
func (*DeleteLanguageRequest) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteLanguageRequest) GetFilter() *LanguageFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type DeleteLanguageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Whether the deletion was successful.
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteLanguageResponse) Reset() {
	*x = DeleteLanguageResponse{}
	mi := &file_language_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLanguageResponse) ProtoMessage() {}

func (x *DeleteLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLanguageResponse.ProtoReflect.Descriptor instead.
func (*DeleteLanguageResponse) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteLanguageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteLanguageResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type SignLanguage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid          string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignLanguage) Reset() {
	*x = SignLanguage{}
	mi := &file_language_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignLanguage) ProtoMessage() {}

func (x *SignLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignLanguage.ProtoReflect.Descriptor instead.
func (*SignLanguage) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{13}
}

func (x *SignLanguage) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SignLanguage) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SignLanguage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SignLanguageFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // Filter by ID (optional).
	Uuid          string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"` // Filter by UUID (optional).
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"` // Filter by name (optional).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignLanguageFilter) Reset() {
	*x = SignLanguageFilter{}
	mi := &file_language_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignLanguageFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignLanguageFilter) ProtoMessage() {}

func (x *SignLanguageFilter) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignLanguageFilter.ProtoReflect.Descriptor instead.
func (*SignLanguageFilter) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{14}
}

func (x *SignLanguageFilter) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SignLanguageFilter) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SignLanguageFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetSignLanguageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *SignLanguageFilter    `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"` // Filter criteria for the query.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSignLanguageRequest) Reset() {
	*x = GetSignLanguageRequest{}
	mi := &file_language_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSignLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignLanguageRequest) ProtoMessage() {}

func (x *GetSignLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignLanguageRequest.ProtoReflect.Descriptor instead.
func (*GetSignLanguageRequest) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{15}
}

func (x *GetSignLanguageRequest) GetFilter() *SignLanguageFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetSignLanguageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Language      *SignLanguage          `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"` // The language that matches the filter.
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSignLanguageResponse) Reset() {
	*x = GetSignLanguageResponse{}
	mi := &file_language_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSignLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignLanguageResponse) ProtoMessage() {}

func (x *GetSignLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignLanguageResponse.ProtoReflect.Descriptor instead.
func (*GetSignLanguageResponse) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{16}
}

func (x *GetSignLanguageResponse) GetLanguage() *SignLanguage {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *GetSignLanguageResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type ListSignLanguagesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SignLanguageFilter filter = 1;
	Page          int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`         // Pagination: page number.
	PageSize      int32 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"` // Pagination: number of items per page.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSignLanguagesRequest) Reset() {
	*x = ListSignLanguagesRequest{}
	mi := &file_language_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSignLanguagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSignLanguagesRequest) ProtoMessage() {}

func (x *ListSignLanguagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSignLanguagesRequest.ProtoReflect.Descriptor instead.
func (*ListSignLanguagesRequest) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{17}
}

func (x *ListSignLanguagesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListSignLanguagesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListSignLanguagesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Languages     []*SignLanguage        `protobuf:"bytes,1,rep,name=languages,proto3" json:"languages,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	Error         *Error                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSignLanguagesResponse) Reset() {
	*x = ListSignLanguagesResponse{}
	mi := &file_language_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSignLanguagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSignLanguagesResponse) ProtoMessage() {}

func (x *ListSignLanguagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSignLanguagesResponse.ProtoReflect.Descriptor instead.
func (*ListSignLanguagesResponse) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{18}
}

func (x *ListSignLanguagesResponse) GetLanguages() []*SignLanguage {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *ListSignLanguagesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListSignLanguagesResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type CreateSignLanguageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Name of the language to create.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSignLanguageRequest) Reset() {
	*x = CreateSignLanguageRequest{}
	mi := &file_language_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSignLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSignLanguageRequest) ProtoMessage() {}

func (x *CreateSignLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSignLanguageRequest.ProtoReflect.Descriptor instead.
func (*CreateSignLanguageRequest) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{19}
}

func (x *CreateSignLanguageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateSignLanguageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Language      *SignLanguage          `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"` // The created language.
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSignLanguageResponse) Reset() {
	*x = CreateSignLanguageResponse{}
	mi := &file_language_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSignLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSignLanguageResponse) ProtoMessage() {}

func (x *CreateSignLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSignLanguageResponse.ProtoReflect.Descriptor instead.
func (*CreateSignLanguageResponse) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{20}
}

func (x *CreateSignLanguageResponse) GetLanguage() *SignLanguage {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *CreateSignLanguageResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type UpdateSignLanguageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // ID of the language to update.
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // New name for the language.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSignLanguageRequest) Reset() {
	*x = UpdateSignLanguageRequest{}
	mi := &file_language_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSignLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSignLanguageRequest) ProtoMessage() {}

func (x *UpdateSignLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSignLanguageRequest.ProtoReflect.Descriptor instead.
func (*UpdateSignLanguageRequest) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateSignLanguageRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSignLanguageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateSignLanguageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Language      *SignLanguage          `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"` // The updated language.
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSignLanguageResponse) Reset() {
	*x = UpdateSignLanguageResponse{}
	mi := &file_language_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSignLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSignLanguageResponse) ProtoMessage() {}

func (x *UpdateSignLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSignLanguageResponse.ProtoReflect.Descriptor instead.
func (*UpdateSignLanguageResponse) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateSignLanguageResponse) GetLanguage() *SignLanguage {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UpdateSignLanguageResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type DeleteSignLanguageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *SignLanguageFilter    `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"` // Filter criteria for deletion.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSignLanguageRequest) Reset() {
	*x = DeleteSignLanguageRequest{}
	mi := &file_language_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSignLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSignLanguageRequest) ProtoMessage() {}

func (x *DeleteSignLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSignLanguageRequest.ProtoReflect.Descriptor instead.
func (*DeleteSignLanguageRequest) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteSignLanguageRequest) GetFilter() *SignLanguageFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type DeleteSignLanguageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // Whether the deletion was successful.
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSignLanguageResponse) Reset() {
	*x = DeleteSignLanguageResponse{}
	mi := &file_language_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSignLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSignLanguageResponse) ProtoMessage() {}

func (x *DeleteSignLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_language_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSignLanguageResponse.ProtoReflect.Descriptor instead.
func (*DeleteSignLanguageResponse) Descriptor() ([]byte, []int) {
	return file_language_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteSignLanguageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteSignLanguageResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_language_proto protoreflect.FileDescriptor

var file_language_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x35, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x42, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x0e, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x5a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x4c, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x7e,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2b,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3b, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x40, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x46, 0x0a, 0x0c, 0x53, 0x69,
	0x67, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x45, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x62, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x50, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x86, 0x01,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x09, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2f, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3f,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x65, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x48, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x54, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x68, 0x69, 0x6e, 0x65, 0x2f, 0x67,
	0x69, 0x76, 0x65, 0x2d, 0x61, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_language_proto_rawDescOnce sync.Once
	file_language_proto_rawDescData = file_language_proto_rawDesc
)

func file_language_proto_rawDescGZIP() []byte {
	file_language_proto_rawDescOnce.Do(func() {
		file_language_proto_rawDescData = protoimpl.X.CompressGZIP(file_language_proto_rawDescData)
	})
	return file_language_proto_rawDescData
}

var file_language_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_language_proto_goTypes = []any{
	(*Error)(nil),                      // 0: Error
	(*Language)(nil),                   // 1: Language
	(*LanguageFilter)(nil),             // 2: LanguageFilter
	(*GetLanguageRequest)(nil),         // 3: GetLanguageRequest
	(*GetLanguageResponse)(nil),        // 4: GetLanguageResponse
	(*ListLanguagesRequest)(nil),       // 5: ListLanguagesRequest
	(*ListLanguagesResponse)(nil),      // 6: ListLanguagesResponse
	(*CreateLanguageRequest)(nil),      // 7: CreateLanguageRequest
	(*CreateLanguageResponse)(nil),     // 8: CreateLanguageResponse
	(*UpdateLanguageRequest)(nil),      // 9: UpdateLanguageRequest
	(*UpdateLanguageResponse)(nil),     // 10: UpdateLanguageResponse
	(*DeleteLanguageRequest)(nil),      // 11: DeleteLanguageRequest
	(*DeleteLanguageResponse)(nil),     // 12: DeleteLanguageResponse
	(*SignLanguage)(nil),               // 13: SignLanguage
	(*SignLanguageFilter)(nil),         // 14: SignLanguageFilter
	(*GetSignLanguageRequest)(nil),     // 15: GetSignLanguageRequest
	(*GetSignLanguageResponse)(nil),    // 16: GetSignLanguageResponse
	(*ListSignLanguagesRequest)(nil),   // 17: ListSignLanguagesRequest
	(*ListSignLanguagesResponse)(nil),  // 18: ListSignLanguagesResponse
	(*CreateSignLanguageRequest)(nil),  // 19: CreateSignLanguageRequest
	(*CreateSignLanguageResponse)(nil), // 20: CreateSignLanguageResponse
	(*UpdateSignLanguageRequest)(nil),  // 21: UpdateSignLanguageRequest
	(*UpdateSignLanguageResponse)(nil), // 22: UpdateSignLanguageResponse
	(*DeleteSignLanguageRequest)(nil),  // 23: DeleteSignLanguageRequest
	(*DeleteSignLanguageResponse)(nil), // 24: DeleteSignLanguageResponse
}
var file_language_proto_depIdxs = []int32{
	2,  // 0: GetLanguageRequest.filter:type_name -> LanguageFilter
	1,  // 1: GetLanguageResponse.language:type_name -> Language
	0,  // 2: GetLanguageResponse.error:type_name -> Error
	1,  // 3: ListLanguagesResponse.languages:type_name -> Language
	0,  // 4: ListLanguagesResponse.error:type_name -> Error
	1,  // 5: CreateLanguageResponse.language:type_name -> Language
	0,  // 6: CreateLanguageResponse.error:type_name -> Error
	1,  // 7: UpdateLanguageResponse.language:type_name -> Language
	0,  // 8: UpdateLanguageResponse.error:type_name -> Error
	2,  // 9: DeleteLanguageRequest.filter:type_name -> LanguageFilter
	0,  // 10: DeleteLanguageResponse.error:type_name -> Error
	14, // 11: GetSignLanguageRequest.filter:type_name -> SignLanguageFilter
	13, // 12: GetSignLanguageResponse.language:type_name -> SignLanguage
	0,  // 13: GetSignLanguageResponse.error:type_name -> Error
	13, // 14: ListSignLanguagesResponse.languages:type_name -> SignLanguage
	0,  // 15: ListSignLanguagesResponse.error:type_name -> Error
	13, // 16: CreateSignLanguageResponse.language:type_name -> SignLanguage
	0,  // 17: CreateSignLanguageResponse.error:type_name -> Error
	13, // 18: UpdateSignLanguageResponse.language:type_name -> SignLanguage
	0,  // 19: UpdateSignLanguageResponse.error:type_name -> Error
	14, // 20: DeleteSignLanguageRequest.filter:type_name -> SignLanguageFilter
	0,  // 21: DeleteSignLanguageResponse.error:type_name -> Error
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_language_proto_init() }
func file_language_proto_init() {
	if File_language_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_language_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_language_proto_goTypes,
		DependencyIndexes: file_language_proto_depIdxs,
		MessageInfos:      file_language_proto_msgTypes,
	}.Build()
	File_language_proto = out.File
	file_language_proto_rawDesc = nil
	file_language_proto_goTypes = nil
	file_language_proto_depIdxs = nil
}
